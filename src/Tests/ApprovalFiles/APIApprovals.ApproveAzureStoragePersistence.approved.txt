[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus.Persistence.AzureStorage.PersistenceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001006dab16cbf58f948e25e061c40486817b00722158f0a2787d8cd3f503daf44978f96edac144e917e59ec98999e011ddde52c53938a6cb5a87a213aa2b5dfe2d45e9035ca40c63caf36c8692e06bbc3eb717070e8ca5813ef695153429dcc4fd7db4c790c724e959b37d9697f7dc22369a20ae67f4785b424edbc63c732dd9eecf")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001006dab16cbf58f948e25e061c40486817b00722158f0a2787d8cd3f503daf44978f96edac144e917e59ec98999e011ddde52c53938a6cb5a87a213aa2b5dfe2d45e9035ca40c63caf36c8692e06bbc3eb717070e8ca5813ef695153429dcc4fd7db4c790c724e959b37d9697f7dc22369a20ae67f4785b424edbc63c732dd9eecf")]
namespace NServiceBus
{
    public class AzureStoragePersistence : NServiceBus.Persistence.PersistenceDefinition { }
    public class AzureStorageSagaPersistence : NServiceBus.Features.Feature
    {
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class AzureStorageSubscriptionPersistence : NServiceBus.Features.Feature
    {
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    [System.ObsoleteAttribute("Azure Storage Queues and Azure Service Bus supports timeouts natively and does no" +
        "t require timeout persistence. Will be removed in version 4.0.0.", true)]
    public class AzureStorageTimeoutPersistence
    {
        public AzureStorageTimeoutPersistence() { }
    }
    public class static ConfigureAzureSagaStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Sagas> AssumeSecondaryIndicesExist(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Sagas> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Sagas> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Sagas> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Sagas> CreateSchema(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Sagas> config, bool createSchema) { }
    }
    public class static ConfigureAzureStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence> config, string connectionString) { }
    }
    public class static ConfigureAzureSubscriptionStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Subscriptions> CacheFor(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Subscriptions> config, System.TimeSpan timeSpan) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Subscriptions> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Subscriptions> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Subscriptions> CreateSchema(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Subscriptions> config, bool createSchema) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Subscriptions> TableName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Subscriptions> config, string tableName) { }
    }
    public class static ConfigureAzureTimeoutStorage
    {
        [System.ObsoleteAttribute("Azure Storage Queues and Azure Service Bus transport supports timeouts natively a" +
            "nd does not require timeout persistence. The member currently throws a NotImplem" +
            "entedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> CatchUpInterval(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> config, int catchUpInterval) { }
        [System.ObsoleteAttribute("Azure Storage Queues and Azure Service Bus transport supports timeouts natively a" +
            "nd does not require timeout persistence. The member currently throws a NotImplem" +
            "entedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> config, string connectionString) { }
        [System.ObsoleteAttribute("Azure Storage Queues and Azure Service Bus transport supports timeouts natively a" +
            "nd does not require timeout persistence. The member currently throws a NotImplem" +
            "entedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> CreateSchema(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> config, bool createSchema) { }
        [System.ObsoleteAttribute("Azure Storage Queues and Azure Service Bus transport supports timeouts natively a" +
            "nd does not require timeout persistence. The member currently throws a NotImplem" +
            "entedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> PartitionKeyScope(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> config, string partitionKeyScope) { }
        [System.ObsoleteAttribute("Azure Storage Queues and Azure Service Bus transport supports timeouts natively a" +
            "nd does not require timeout persistence. The member currently throws a NotImplem" +
            "entedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> TimeoutDataTableName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> config, string tableName) { }
        [System.ObsoleteAttribute("Azure Storage Queues and Azure Service Bus transport supports timeouts natively a" +
            "nd does not require timeout persistence. The member currently throws a NotImplem" +
            "entedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> TimeoutManagerDataTableName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> config, string tableName) { }
        [System.ObsoleteAttribute("Azure Storage Queues and Azure Service Bus transport supports timeouts natively a" +
            "nd does not require timeout persistence. The member currently throws a NotImplem" +
            "entedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> TimeoutStateContainerName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureStoragePersistence, NServiceBus.StorageType.Timeouts> config, string blobName) { }
    }
}
namespace NServiceBus.Persistence.AzureStorage
{
    public class DuplicatedSagaFoundException : System.Exception
    {
        public DuplicatedSagaFoundException(System.Type sagaType, string propertyName, params System.Guid[] identifiers) { }
        public System.Guid[] Identifiers { get; }
        public string PropertyName { get; }
        public System.Type SagaType { get; }
    }
    public class RetryNeededException : System.Exception
    {
        public RetryNeededException() { }
        public RetryNeededException(System.Exception innerException) { }
    }
}